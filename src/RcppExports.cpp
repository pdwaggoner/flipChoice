// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// logDensitiesChoice
NumericVector logDensitiesChoice(NumericVector b, NumericMatrix X, NumericVector weights, int n_alternatives, int n_parameters);
RcppExport SEXP _flipChoice_logDensitiesChoice(SEXP bSEXP, SEXP XSEXP, SEXP weightsSEXP, SEXP n_alternativesSEXP, SEXP n_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type n_alternatives(n_alternativesSEXP);
    Rcpp::traits::input_parameter< int >::type n_parameters(n_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(logDensitiesChoice(b, X, weights, n_alternatives, n_parameters));
    return rcpp_result_gen;
END_RCPP
}
// logDensityChoice
double logDensityChoice(NumericVector b, NumericMatrix X, NumericVector weights, int n_alternatives, int n_parameters);
RcppExport SEXP _flipChoice_logDensityChoice(SEXP bSEXP, SEXP XSEXP, SEXP weightsSEXP, SEXP n_alternativesSEXP, SEXP n_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type n_alternatives(n_alternativesSEXP);
    Rcpp::traits::input_parameter< int >::type n_parameters(n_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(logDensityChoice(b, X, weights, n_alternatives, n_parameters));
    return rcpp_result_gen;
END_RCPP
}
// gradientChoice
NumericVector gradientChoice(NumericVector b, NumericMatrix X, NumericVector weights, int n_alternatives, int n_parameters);
RcppExport SEXP _flipChoice_gradientChoice(SEXP bSEXP, SEXP XSEXP, SEXP weightsSEXP, SEXP n_alternativesSEXP, SEXP n_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type n_alternatives(n_alternativesSEXP);
    Rcpp::traits::input_parameter< int >::type n_parameters(n_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(gradientChoice(b, X, weights, n_alternatives, n_parameters));
    return rcpp_result_gen;
END_RCPP
}
// computeExpDiscriminants
NumericMatrix computeExpDiscriminants(NumericMatrix X, NumericVector parameters, int n_alternatives);
RcppExport SEXP _flipChoice_computeExpDiscriminants(SEXP XSEXP, SEXP parametersSEXP, SEXP n_alternativesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type n_alternatives(n_alternativesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeExpDiscriminants(X, parameters, n_alternatives));
    return rcpp_result_gen;
END_RCPP
}
// computeShareDerivative
double computeShareDerivative(NumericMatrix X, NumericMatrix exp_discriminants, int parameter_index, int n_parameters);
RcppExport SEXP _flipChoice_computeShareDerivative(SEXP XSEXP, SEXP exp_discriminantsSEXP, SEXP parameter_indexSEXP, SEXP n_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type exp_discriminants(exp_discriminantsSEXP);
    Rcpp::traits::input_parameter< int >::type parameter_index(parameter_indexSEXP);
    Rcpp::traits::input_parameter< int >::type n_parameters(n_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(computeShareDerivative(X, exp_discriminants, parameter_index, n_parameters));
    return rcpp_result_gen;
END_RCPP
}
// d0CriterionShortcut
double d0CriterionShortcut(Eigen::MatrixXd& question_design, Eigen::MatrixXd& partial_info_matrix, int alternatives_per_question);
RcppExport SEXP _flipChoice_d0CriterionShortcut(SEXP question_designSEXP, SEXP partial_info_matrixSEXP, SEXP alternatives_per_questionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type question_design(question_designSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type partial_info_matrix(partial_info_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type alternatives_per_question(alternatives_per_questionSEXP);
    rcpp_result_gen = Rcpp::wrap(d0CriterionShortcut(question_design, partial_info_matrix, alternatives_per_question));
    return rcpp_result_gen;
END_RCPP
}
// d0PartialInfoMatrix
Eigen::MatrixXd d0PartialInfoMatrix(Eigen::MatrixXd& coded_design, int n_questions, int question, int alternatives_per_question);
RcppExport SEXP _flipChoice_d0PartialInfoMatrix(SEXP coded_designSEXP, SEXP n_questionsSEXP, SEXP questionSEXP, SEXP alternatives_per_questionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type coded_design(coded_designSEXP);
    Rcpp::traits::input_parameter< int >::type n_questions(n_questionsSEXP);
    Rcpp::traits::input_parameter< int >::type question(questionSEXP);
    Rcpp::traits::input_parameter< int >::type alternatives_per_question(alternatives_per_questionSEXP);
    rcpp_result_gen = Rcpp::wrap(d0PartialInfoMatrix(coded_design, n_questions, question, alternatives_per_question));
    return rcpp_result_gen;
END_RCPP
}
// choiceProbabilities
Eigen::VectorXd choiceProbabilities(Eigen::MatrixXd& question_design, Eigen::VectorXd& prior);
RcppExport SEXP _flipChoice_choiceProbabilities(SEXP question_designSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type question_design(question_designSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(choiceProbabilities(question_design, prior));
    return rcpp_result_gen;
END_RCPP
}
// dPCriterionShortcut
double dPCriterionShortcut(Eigen::MatrixXd& question_design, Eigen::VectorXd& prior, Eigen::MatrixXd& partial_info_matrix, int alternatives_per_question);
RcppExport SEXP _flipChoice_dPCriterionShortcut(SEXP question_designSEXP, SEXP priorSEXP, SEXP partial_info_matrixSEXP, SEXP alternatives_per_questionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type question_design(question_designSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type partial_info_matrix(partial_info_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type alternatives_per_question(alternatives_per_questionSEXP);
    rcpp_result_gen = Rcpp::wrap(dPCriterionShortcut(question_design, prior, partial_info_matrix, alternatives_per_question));
    return rcpp_result_gen;
END_RCPP
}
// dPPartialInfoMatrix
Eigen::MatrixXd dPPartialInfoMatrix(Eigen::MatrixXd& coded_design, Eigen::VectorXd& prior, int n_questions, int question, int alternatives_per_question);
RcppExport SEXP _flipChoice_dPPartialInfoMatrix(SEXP coded_designSEXP, SEXP priorSEXP, SEXP n_questionsSEXP, SEXP questionSEXP, SEXP alternatives_per_questionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type coded_design(coded_designSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< int >::type n_questions(n_questionsSEXP);
    Rcpp::traits::input_parameter< int >::type question(questionSEXP);
    Rcpp::traits::input_parameter< int >::type alternatives_per_question(alternatives_per_questionSEXP);
    rcpp_result_gen = Rcpp::wrap(dPPartialInfoMatrix(coded_design, prior, n_questions, question, alternatives_per_question));
    return rcpp_result_gen;
END_RCPP
}
// setLevel
Eigen::MatrixXd setLevel(Eigen::MatrixXd& question_design, int row_index, int attribute_index, int lvl, Eigen::VectorXi levels_per_attribute, Eigen::VectorXi start_indices);
RcppExport SEXP _flipChoice_setLevel(SEXP question_designSEXP, SEXP row_indexSEXP, SEXP attribute_indexSEXP, SEXP lvlSEXP, SEXP levels_per_attributeSEXP, SEXP start_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type question_design(question_designSEXP);
    Rcpp::traits::input_parameter< int >::type row_index(row_indexSEXP);
    Rcpp::traits::input_parameter< int >::type attribute_index(attribute_indexSEXP);
    Rcpp::traits::input_parameter< int >::type lvl(lvlSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type levels_per_attribute(levels_per_attributeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type start_indices(start_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(setLevel(question_design, row_index, attribute_index, lvl, levels_per_attribute, start_indices));
    return rcpp_result_gen;
END_RCPP
}
// setLevelAllRows
Eigen::MatrixXd setLevelAllRows(Eigen::MatrixXd& question_design, int attribute_index, int lvl, Eigen::VectorXi levels_per_attribute, Eigen::VectorXi start_indices);
RcppExport SEXP _flipChoice_setLevelAllRows(SEXP question_designSEXP, SEXP attribute_indexSEXP, SEXP lvlSEXP, SEXP levels_per_attributeSEXP, SEXP start_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type question_design(question_designSEXP);
    Rcpp::traits::input_parameter< int >::type attribute_index(attribute_indexSEXP);
    Rcpp::traits::input_parameter< int >::type lvl(lvlSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type levels_per_attribute(levels_per_attributeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type start_indices(start_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(setLevelAllRows(question_design, attribute_index, lvl, levels_per_attribute, start_indices));
    return rcpp_result_gen;
END_RCPP
}
// getLevel
int getLevel(Eigen::MatrixXd& question_design, int row_index, int attribute_index, Eigen::VectorXi levels_per_attribute, Eigen::VectorXi start_indices);
RcppExport SEXP _flipChoice_getLevel(SEXP question_designSEXP, SEXP row_indexSEXP, SEXP attribute_indexSEXP, SEXP levels_per_attributeSEXP, SEXP start_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type question_design(question_designSEXP);
    Rcpp::traits::input_parameter< int >::type row_index(row_indexSEXP);
    Rcpp::traits::input_parameter< int >::type attribute_index(attribute_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type levels_per_attribute(levels_per_attributeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type start_indices(start_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(getLevel(question_design, row_index, attribute_index, levels_per_attribute, start_indices));
    return rcpp_result_gen;
END_RCPP
}
