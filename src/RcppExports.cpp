// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// d0CriterionShortcutRcpp
double d0CriterionShortcutRcpp(Eigen::MatrixXd& question_design, Eigen::MatrixXd& partial_info_matrix, int alternatives_per_question);
RcppExport SEXP _flipChoice_d0CriterionShortcutRcpp(SEXP question_designSEXP, SEXP partial_info_matrixSEXP, SEXP alternatives_per_questionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type question_design(question_designSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type partial_info_matrix(partial_info_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type alternatives_per_question(alternatives_per_questionSEXP);
    rcpp_result_gen = Rcpp::wrap(d0CriterionShortcutRcpp(question_design, partial_info_matrix, alternatives_per_question));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flipChoice_d0CriterionShortcutRcpp", (DL_FUNC) &_flipChoice_d0CriterionShortcutRcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_flipChoice(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
